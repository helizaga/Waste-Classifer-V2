{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","previewImageUrl","setPreviewImageUrl","imagePrediction","setImagePrediction","imageFile","setImageFile","className","height","alt","src","type","name","onChange","event","file","target","files","callback","reader","FileReader","readAsDataURL","onloadend","e","result","generatePreviewImageUrl","onClick","formData","FormData","append","console","log","process","cwd","t0","performance","now","axios","post","then","response","data","t1","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oKA8FeA,IAzFH,WACV,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAkCJ,qBAAlC,mBAAOK,EAAP,KAAkBC,EAAlB,KAiDA,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,4CAEA,sBAAKA,UAAU,aAAf,UACE,mEAGA,qBAAKA,UAAU,QAAf,SACGN,GAAmB,qBAAKO,OAAQ,IAAKC,IAAI,GAAGC,IAAKT,MAIpD,8BACE,uBAAOU,KAAK,OAAOC,KAAK,OAAOC,SArDlB,SAACC,GACpB,IAAMC,EAAOD,EAAME,OAAOC,MAAM,GAG3BF,IAILT,EAAaS,GAfiB,SAACA,EAAMG,GACrC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,UAAY,SAACC,GAAD,OAAOL,EAASC,EAAOK,SAa1CC,CAAwBV,GAAM,SAACd,GAC7BC,EAAmBD,GACnBG,EAAmB,aA8CjB,8BACE,uBAAOO,KAAK,SAASe,QA1CP,SAACH,GACrB,IAAMI,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQxB,EAAW,WACnCyB,QAAQC,IAAI,gCAAiCC,EAAQC,OAErD,IAAIC,EAAKC,YAAYC,MACrBC,IACGC,KADH,UACmBX,GAChBY,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtBrC,EAAmBqC,GACnB,IAAIC,EAAKP,YAAYC,MACrBN,QAAQC,IACN,0CACGW,EAAKR,GACN,qBAGLS,OAAM,SAACC,GACNd,QAAQC,IAAIa,WA4BXzC,GACC,qBAAKI,UAAU,kBAAf,SACE,qGAEaJ,gB,4ICzEL0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZNC,IAASC,OAAO,cAACpD,EAAA,EAAD,IAASqD,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.bc081071.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [previewImageUrl, setPreviewImageUrl] = useState(false);\n  const [imagePrediction, setImagePrediction] = useState(\"\");\n  const [imageFile, setImageFile] = useState();\n  // Function for previewing the chosen image\n\n  const generatePreviewImageUrl = (file, callback) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = (e) => callback(reader.result);\n  };\n\n  // Event handler when image is chosen\n  const handleChange = (event) => {\n    const file = event.target.files[0];\n\n    // If the image upload is cancelled\n    if (!file) {\n      return;\n    }\n\n    setImageFile(file);\n    generatePreviewImageUrl(file, (previewImageUrl) => {\n      setPreviewImageUrl(previewImageUrl);\n      setImagePrediction(\"\");\n    });\n  };\n\n  // Function for sending image to the backend\n  const uploadHandler = (e) => {\n    const formData = new FormData();\n    formData.append(\"file\", imageFile, \"img.png\");\n    console.log(\"This is the working directory\", process.cwd());\n\n    var t0 = performance.now();\n    axios\n      .post(`/upload`, formData)\n      .then((response) => {\n        const data = response.data;\n        setImagePrediction(data);\n        var t1 = performance.now();\n        console.log(\n          \"The time it took to predict the image \" +\n            (t1 - t0) +\n            \" milliseconds.\"\n        );\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-title\">Waste Image Classification App</h1>\n\n      <div className=\"App-upload\">\n        <p>Upload an image for classification</p>\n\n        {/* Field for previewing the chosen image */}\n        <div className=\"image\">\n          {previewImageUrl && <img height={400} alt=\"\" src={previewImageUrl} />}\n        </div>\n\n        {/* Button for choosing an image */}\n        <div>\n          <input type=\"file\" name=\"file\" onChange={handleChange} />\n        </div>\n\n        {/* Button for sending image to backend */}\n        <div>\n          <input type=\"submit\" onClick={uploadHandler} />\n        </div>\n\n        {/* Text for model prediction */}\n\n        {imagePrediction && (\n          <div className=\"Prediction-area\">\n            <p>\n              The model predicted that this image is of the waste image\n              category: {imagePrediction}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}