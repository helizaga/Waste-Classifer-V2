{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","_super","call","state","previewImageUrl","imageHeight","imagePrediction","generatePreviewImageUrl","bind","assertThisInitialized","handleChange","uploadHandler","file","callback","reader","FileReader","readAsDataURL","onloadend","e","result","event","_this2","target","files","setState","imageFile","self","formData","FormData","append","t0","performance","now","axios","post","then","response","data","t1","console","log","react_default","a","createElement","className","type","name","onChange","onClick","height","alt","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2uBAsGeA,0CA9Fb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAI,EAAAC,KAAAF,OACKG,MAAQ,CACXC,iBAAiB,EACjBC,YAAa,IACbC,gBAAiB,IAEnBT,EAAKU,wBAA0BV,EAAKU,wBAAwBC,KAA7BV,OAAAW,EAAA,EAAAX,CAAAD,IAC/BA,EAAKa,aAAeb,EAAKa,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKc,cAAgBd,EAAKc,cAAcH,KAAnBV,OAAAW,EAAA,EAAAX,CAAAD,IATTA,6DAaZ,SAAwBe,EAAMC,GAC5B,IAAMC,EAAS,IAAIC,WACPD,EAAOE,cAAcJ,GACjCE,EAAOG,UAAY,SAAAC,GAAC,OAAIL,EAASC,EAAOK,qCAI1C,SAAaC,GAAO,IAAAC,EAAArB,KACZY,EAAOQ,EAAME,OAAOC,MAAM,GAG3BX,IAILZ,KAAKwB,SAAS,CAACC,UAAWb,IAC1BZ,KAAKO,wBAAwBK,EAAM,SAAAR,GAC7BiB,EAAKG,SAAS,CACZpB,kBACAE,gBAAgB,qCAM1B,SAAcY,GACd,IAAIQ,EAAO1B,KACL2B,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ7B,KAAKG,MAAMsB,UAAW,WAE9C,IAAIK,EAAKC,YAAYC,MACrBC,IAAMC,KAAK,+BAAgCP,GAC1CQ,KAAK,SAASC,EAAUC,GACjBA,EAAOD,EAASC,KAChBX,EAAKF,SAAS,CAAClB,gBAAgB+B,IAC/B,IAAIC,EAAKP,YAAYC,MACrBO,QAAQC,IAAI,0CAA4CF,EAAKR,GAAM,0CAI7E,WACE,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,+CAKAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,OAAOC,SAAU/C,KAAKU,gBAI9C+B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASG,QAAShD,KAAKW,iBAInC8B,EAAAC,EAAAC,cAAA,WACE3C,KAAKG,MAAMC,iBACbqC,EAAAC,EAAAC,cAAA,OAAKM,OAAQjD,KAAKG,MAAME,YAAa6C,IAAI,GAAGC,IAAKnD,KAAKG,MAAMC,mBAK5DqC,EAAAC,EAAAC,cAAA,WACE3C,KAAKG,MAAMG,iBACXmC,EAAAC,EAAAC,cAAA,iCAAyB3C,KAAKG,MAAMG,4BArF9B8C,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.d2c5e310.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  // Constructor\n  constructor() {\n    super()\n    this.state = {\n      previewImageUrl: false,\n      imageHeight: 200,\n      imagePrediction: \"\",\n    }\n    this.generatePreviewImageUrl = this.generatePreviewImageUrl.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.uploadHandler = this.uploadHandler.bind(this)\n  }\n\n    // Function for previewing the chosen image\n    generatePreviewImageUrl(file, callback) {\n      const reader = new FileReader()\n      const url = reader.readAsDataURL(file)\n      reader.onloadend = e => callback(reader.result)\n    }\n\n    // Event handler when image is chosen\n    handleChange(event) {\n      const file = event.target.files[0]\n      \n      // If the image upload is cancelled\n      if (!file) {\n        return\n      }\n\n      this.setState({imageFile: file})\n      this.generatePreviewImageUrl(file, previewImageUrl => {\n            this.setState({\n              previewImageUrl,\n              imagePrediction:\"\"\n            })\n          })\n    }\n\n    // Function for sending image to the backend\n    uploadHandler(e) {\n    var self = this;\n    const formData = new FormData()\n    formData.append('file', this.state.imageFile, 'img.png')\n    \n    var t0 = performance.now();\n    axios.post('http://127.0.0.1:5000/upload', formData)\n    .then(function(response, data) {\n            data = response.data;\n            self.setState({imagePrediction:data})\n            var t1 = performance.now();\n            console.log(\"The time it took to predict the image \" + (t1 - t0) + \" milliseconds.\")\n        })\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div className=\"App-upload\">\n          <p>\n            Upload an image for classification\n          </p>\n\n          {/* Button for choosing an image */}\n          <div>\n          <input type=\"file\" name=\"file\" onChange={this.handleChange} />\n          </div>\n\n          {/* Button for sending image to backend */}\n          <div>\n          <input type=\"submit\" onClick={this.uploadHandler} />\n          </div>\n\n          {/* Field for previewing the chosen image */}\n          <div>\n          { this.state.previewImageUrl &&\n          <img height={this.state.imageHeight} alt=\"\" src={this.state.previewImageUrl} />\n          }\n          </div>\n\n          {/* Text for model prediction */}\n          <div>\n          { this.state.imagePrediction &&\n            <p>The model predicted: {this.state.imagePrediction}\n            </p>\n\n          }\n          </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}